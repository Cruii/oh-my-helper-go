// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: bilibili.proto

package bilibili

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Bilibili_GetLoginQrCode_FullMethodName = "/bilibili.Bilibili/GetLoginQrCode"
	Bilibili_Login_FullMethodName          = "/bilibili.Bilibili/Login"
	Bilibili_User_FullMethodName           = "/bilibili.Bilibili/User"
	Bilibili_Users_FullMethodName          = "/bilibili.Bilibili/Users"
)

// BilibiliClient is the client API for Bilibili service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BilibiliClient interface {
	GetLoginQrCode(ctx context.Context, in *QrCodeRequest, opts ...grpc.CallOption) (*QrCodeResponse, error)
	Login(ctx context.Context, in *BiliLoginRequest, opts ...grpc.CallOption) (*BiliLoginResponse, error)
	User(ctx context.Context, in *BiliUserRequest, opts ...grpc.CallOption) (*BiliUserResponse, error)
	Users(ctx context.Context, in *BiliUserListRequest, opts ...grpc.CallOption) (*BiliUserListResponse, error)
}

type bilibiliClient struct {
	cc grpc.ClientConnInterface
}

func NewBilibiliClient(cc grpc.ClientConnInterface) BilibiliClient {
	return &bilibiliClient{cc}
}

func (c *bilibiliClient) GetLoginQrCode(ctx context.Context, in *QrCodeRequest, opts ...grpc.CallOption) (*QrCodeResponse, error) {
	out := new(QrCodeResponse)
	err := c.cc.Invoke(ctx, Bilibili_GetLoginQrCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bilibiliClient) Login(ctx context.Context, in *BiliLoginRequest, opts ...grpc.CallOption) (*BiliLoginResponse, error) {
	out := new(BiliLoginResponse)
	err := c.cc.Invoke(ctx, Bilibili_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bilibiliClient) User(ctx context.Context, in *BiliUserRequest, opts ...grpc.CallOption) (*BiliUserResponse, error) {
	out := new(BiliUserResponse)
	err := c.cc.Invoke(ctx, Bilibili_User_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bilibiliClient) Users(ctx context.Context, in *BiliUserListRequest, opts ...grpc.CallOption) (*BiliUserListResponse, error) {
	out := new(BiliUserListResponse)
	err := c.cc.Invoke(ctx, Bilibili_Users_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BilibiliServer is the server API for Bilibili service.
// All implementations must embed UnimplementedBilibiliServer
// for forward compatibility
type BilibiliServer interface {
	GetLoginQrCode(context.Context, *QrCodeRequest) (*QrCodeResponse, error)
	Login(context.Context, *BiliLoginRequest) (*BiliLoginResponse, error)
	User(context.Context, *BiliUserRequest) (*BiliUserResponse, error)
	Users(context.Context, *BiliUserListRequest) (*BiliUserListResponse, error)
	mustEmbedUnimplementedBilibiliServer()
}

// UnimplementedBilibiliServer must be embedded to have forward compatible implementations.
type UnimplementedBilibiliServer struct {
}

func (UnimplementedBilibiliServer) GetLoginQrCode(context.Context, *QrCodeRequest) (*QrCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginQrCode not implemented")
}
func (UnimplementedBilibiliServer) Login(context.Context, *BiliLoginRequest) (*BiliLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedBilibiliServer) User(context.Context, *BiliUserRequest) (*BiliUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method User not implemented")
}
func (UnimplementedBilibiliServer) Users(context.Context, *BiliUserListRequest) (*BiliUserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Users not implemented")
}
func (UnimplementedBilibiliServer) mustEmbedUnimplementedBilibiliServer() {}

// UnsafeBilibiliServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BilibiliServer will
// result in compilation errors.
type UnsafeBilibiliServer interface {
	mustEmbedUnimplementedBilibiliServer()
}

func RegisterBilibiliServer(s grpc.ServiceRegistrar, srv BilibiliServer) {
	s.RegisterService(&Bilibili_ServiceDesc, srv)
}

func _Bilibili_GetLoginQrCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QrCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BilibiliServer).GetLoginQrCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bilibili_GetLoginQrCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BilibiliServer).GetLoginQrCode(ctx, req.(*QrCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bilibili_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BiliLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BilibiliServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bilibili_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BilibiliServer).Login(ctx, req.(*BiliLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bilibili_User_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BiliUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BilibiliServer).User(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bilibili_User_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BilibiliServer).User(ctx, req.(*BiliUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bilibili_Users_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BiliUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BilibiliServer).Users(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bilibili_Users_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BilibiliServer).Users(ctx, req.(*BiliUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bilibili_ServiceDesc is the grpc.ServiceDesc for Bilibili service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bilibili_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.Bilibili",
	HandlerType: (*BilibiliServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLoginQrCode",
			Handler:    _Bilibili_GetLoginQrCode_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Bilibili_Login_Handler,
		},
		{
			MethodName: "User",
			Handler:    _Bilibili_User_Handler,
		},
		{
			MethodName: "Users",
			Handler:    _Bilibili_Users_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bilibili.proto",
}
