// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bilibiliUserFieldNames          = builder.RawFieldNames(&BilibiliUser{})
	bilibiliUserRows                = strings.Join(bilibiliUserFieldNames, ",")
	bilibiliUserRowsExpectAutoSet   = strings.Join(stringx.Remove(bilibiliUserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	bilibiliUserRowsWithPlaceHolder = strings.Join(stringx.Remove(bilibiliUserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	bilibiliUserModel interface {
		Insert(ctx context.Context, data *BilibiliUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BilibiliUser, error)
		Update(ctx context.Context, data *BilibiliUser) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBilibiliUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	BilibiliUser struct {
		Id            int64           `db:"id"`
		Dedeuserid    sql.NullString  `db:"dedeuserid"`
		Username      sql.NullString  `db:"username"`
		Coins         sql.NullFloat64 `db:"coins"`
		CurrentExp    sql.NullInt64   `db:"current_exp"`
		NextExp       sql.NullInt64   `db:"next_exp"`
		IsLogin       sql.NullBool    `db:"is_login"`
		UpgradeDays   sql.NullInt64   `db:"upgrade_days"`
		Level         sql.NullInt64   `db:"level"`
		Medals        sql.NullString  `db:"medals"`
		VipStatus     sql.NullInt64   `db:"vip_status"`
		VipType       sql.NullInt64   `db:"vip_type"`
		VipLabelTheme sql.NullString  `db:"vip_label_theme"`
		Sign          sql.NullString  `db:"sign"`
		LastRunTime   sql.NullTime    `db:"last_run_time"`
		CreateTime    sql.NullTime    `db:"create_time"`
	}
)

func newBilibiliUserModel(conn sqlx.SqlConn) *defaultBilibiliUserModel {
	return &defaultBilibiliUserModel{
		conn:  conn,
		table: "`bilibili_user`",
	}
}

func (m *defaultBilibiliUserModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultBilibiliUserModel) FindOne(ctx context.Context, id int64) (*BilibiliUser, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bilibiliUserRows, m.table)
	var resp BilibiliUser
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBilibiliUserModel) Insert(ctx context.Context, data *BilibiliUser) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, bilibiliUserRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Dedeuserid, data.Username, data.Coins, data.CurrentExp, data.NextExp, data.IsLogin, data.UpgradeDays, data.Level, data.Medals, data.VipStatus, data.VipType, data.VipLabelTheme, data.Sign, data.LastRunTime)
	return ret, err
}

func (m *defaultBilibiliUserModel) Update(ctx context.Context, data *BilibiliUser) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bilibiliUserRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Dedeuserid, data.Username, data.Coins, data.CurrentExp, data.NextExp, data.IsLogin, data.UpgradeDays, data.Level, data.Medals, data.VipStatus, data.VipType, data.VipLabelTheme, data.Sign, data.LastRunTime, data.Id)
	return err
}

func (m *defaultBilibiliUserModel) tableName() string {
	return m.table
}
