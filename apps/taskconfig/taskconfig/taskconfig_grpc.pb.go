// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: taskconfig.proto

package taskconfig

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TaskConfig_Ping_FullMethodName           = "/taskconfig.TaskConfig/Ping"
	TaskConfig_GetBiliConfig_FullMethodName  = "/taskconfig.TaskConfig/GetBiliConfig"
	TaskConfig_EditBiliConfig_FullMethodName = "/taskconfig.TaskConfig/EditBiliConfig"
	TaskConfig_AddBiliConfig_FullMethodName  = "/taskconfig.TaskConfig/AddBiliConfig"
)

// TaskConfigClient is the client API for TaskConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskConfigClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetBiliConfig(ctx context.Context, in *BiliConfigRequest, opts ...grpc.CallOption) (*BiliConfigResponse, error)
	EditBiliConfig(ctx context.Context, in *BiliConfigEditRequest, opts ...grpc.CallOption) (*BiliConfigResponse, error)
	AddBiliConfig(ctx context.Context, in *BiliConfigAddRequest, opts ...grpc.CallOption) (*BiliConfigResponse, error)
}

type taskConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskConfigClient(cc grpc.ClientConnInterface) TaskConfigClient {
	return &taskConfigClient{cc}
}

func (c *taskConfigClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, TaskConfig_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskConfigClient) GetBiliConfig(ctx context.Context, in *BiliConfigRequest, opts ...grpc.CallOption) (*BiliConfigResponse, error) {
	out := new(BiliConfigResponse)
	err := c.cc.Invoke(ctx, TaskConfig_GetBiliConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskConfigClient) EditBiliConfig(ctx context.Context, in *BiliConfigEditRequest, opts ...grpc.CallOption) (*BiliConfigResponse, error) {
	out := new(BiliConfigResponse)
	err := c.cc.Invoke(ctx, TaskConfig_EditBiliConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskConfigClient) AddBiliConfig(ctx context.Context, in *BiliConfigAddRequest, opts ...grpc.CallOption) (*BiliConfigResponse, error) {
	out := new(BiliConfigResponse)
	err := c.cc.Invoke(ctx, TaskConfig_AddBiliConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskConfigServer is the server API for TaskConfig service.
// All implementations must embed UnimplementedTaskConfigServer
// for forward compatibility
type TaskConfigServer interface {
	Ping(context.Context, *Request) (*Response, error)
	GetBiliConfig(context.Context, *BiliConfigRequest) (*BiliConfigResponse, error)
	EditBiliConfig(context.Context, *BiliConfigEditRequest) (*BiliConfigResponse, error)
	AddBiliConfig(context.Context, *BiliConfigAddRequest) (*BiliConfigResponse, error)
	mustEmbedUnimplementedTaskConfigServer()
}

// UnimplementedTaskConfigServer must be embedded to have forward compatible implementations.
type UnimplementedTaskConfigServer struct {
}

func (UnimplementedTaskConfigServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedTaskConfigServer) GetBiliConfig(context.Context, *BiliConfigRequest) (*BiliConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBiliConfig not implemented")
}
func (UnimplementedTaskConfigServer) EditBiliConfig(context.Context, *BiliConfigEditRequest) (*BiliConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditBiliConfig not implemented")
}
func (UnimplementedTaskConfigServer) AddBiliConfig(context.Context, *BiliConfigAddRequest) (*BiliConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBiliConfig not implemented")
}
func (UnimplementedTaskConfigServer) mustEmbedUnimplementedTaskConfigServer() {}

// UnsafeTaskConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskConfigServer will
// result in compilation errors.
type UnsafeTaskConfigServer interface {
	mustEmbedUnimplementedTaskConfigServer()
}

func RegisterTaskConfigServer(s grpc.ServiceRegistrar, srv TaskConfigServer) {
	s.RegisterService(&TaskConfig_ServiceDesc, srv)
}

func _TaskConfig_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskConfigServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskConfig_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskConfigServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskConfig_GetBiliConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BiliConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskConfigServer).GetBiliConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskConfig_GetBiliConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskConfigServer).GetBiliConfig(ctx, req.(*BiliConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskConfig_EditBiliConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BiliConfigEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskConfigServer).EditBiliConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskConfig_EditBiliConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskConfigServer).EditBiliConfig(ctx, req.(*BiliConfigEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskConfig_AddBiliConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BiliConfigAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskConfigServer).AddBiliConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskConfig_AddBiliConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskConfigServer).AddBiliConfig(ctx, req.(*BiliConfigAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskConfig_ServiceDesc is the grpc.ServiceDesc for TaskConfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskConfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "taskconfig.TaskConfig",
	HandlerType: (*TaskConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _TaskConfig_Ping_Handler,
		},
		{
			MethodName: "GetBiliConfig",
			Handler:    _TaskConfig_GetBiliConfig_Handler,
		},
		{
			MethodName: "EditBiliConfig",
			Handler:    _TaskConfig_EditBiliConfig_Handler,
		},
		{
			MethodName: "AddBiliConfig",
			Handler:    _TaskConfig_AddBiliConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "taskconfig.proto",
}
