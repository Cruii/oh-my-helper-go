// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	pushConfigFieldNames          = builder.RawFieldNames(&PushConfig{})
	pushConfigRows                = strings.Join(pushConfigFieldNames, ",")
	pushConfigRowsExpectAutoSet   = strings.Join(stringx.Remove(pushConfigFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	pushConfigRowsWithPlaceHolder = strings.Join(stringx.Remove(pushConfigFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	pushConfigModel interface {
		Insert(ctx context.Context, data *PushConfig) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PushConfig, error)
		FindOneByUserId(ctx context.Context, userId string) (*PushConfig, error)
		Update(ctx context.Context, data *PushConfig) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPushConfigModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PushConfig struct {
		Id         int64     `db:"id"`          // 自增主键
		UserId     string    `db:"user_id"`     // 用户id
		Config     string    `db:"config"`      // 推送配置，JSON格式存储
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateTime time.Time `db:"update_time"` // 更新时间
	}
)

func newPushConfigModel(conn sqlx.SqlConn) *defaultPushConfigModel {
	return &defaultPushConfigModel{
		conn:  conn,
		table: "`push_config`",
	}
}

func (m *defaultPushConfigModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPushConfigModel) FindOne(ctx context.Context, id int64) (*PushConfig, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pushConfigRows, m.table)
	var resp PushConfig
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPushConfigModel) FindOneByUserId(ctx context.Context, userId string) (*PushConfig, error) {
	var resp PushConfig
	query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", pushConfigRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPushConfigModel) Insert(ctx context.Context, data *PushConfig) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, pushConfigRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Config)
	return ret, err
}

func (m *defaultPushConfigModel) Update(ctx context.Context, newData *PushConfig) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, pushConfigRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.UserId, newData.Config, newData.Id)
	return err
}

func (m *defaultPushConfigModel) tableName() string {
	return m.table
}
