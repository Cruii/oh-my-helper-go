// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: pushconfig.proto

package pushconfig

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PushConfig_Ping_FullMethodName           = "/pushconfig.PushConfig/Ping"
	PushConfig_GetPushConfig_FullMethodName  = "/pushconfig.PushConfig/GetPushConfig"
	PushConfig_AddPushConfig_FullMethodName  = "/pushconfig.PushConfig/AddPushConfig"
	PushConfig_EditPushConfig_FullMethodName = "/pushconfig.PushConfig/EditPushConfig"
)

// PushConfigClient is the client API for PushConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PushConfigClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetPushConfig(ctx context.Context, in *PushConfigRequest, opts ...grpc.CallOption) (*PushConfigResponse, error)
	AddPushConfig(ctx context.Context, in *PushConfigAddRequest, opts ...grpc.CallOption) (*PushConfigResponse, error)
	EditPushConfig(ctx context.Context, in *PushConfigEditRequest, opts ...grpc.CallOption) (*PushConfigResponse, error)
}

type pushConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewPushConfigClient(cc grpc.ClientConnInterface) PushConfigClient {
	return &pushConfigClient{cc}
}

func (c *pushConfigClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, PushConfig_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushConfigClient) GetPushConfig(ctx context.Context, in *PushConfigRequest, opts ...grpc.CallOption) (*PushConfigResponse, error) {
	out := new(PushConfigResponse)
	err := c.cc.Invoke(ctx, PushConfig_GetPushConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushConfigClient) AddPushConfig(ctx context.Context, in *PushConfigAddRequest, opts ...grpc.CallOption) (*PushConfigResponse, error) {
	out := new(PushConfigResponse)
	err := c.cc.Invoke(ctx, PushConfig_AddPushConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushConfigClient) EditPushConfig(ctx context.Context, in *PushConfigEditRequest, opts ...grpc.CallOption) (*PushConfigResponse, error) {
	out := new(PushConfigResponse)
	err := c.cc.Invoke(ctx, PushConfig_EditPushConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PushConfigServer is the server API for PushConfig service.
// All implementations must embed UnimplementedPushConfigServer
// for forward compatibility
type PushConfigServer interface {
	Ping(context.Context, *Request) (*Response, error)
	GetPushConfig(context.Context, *PushConfigRequest) (*PushConfigResponse, error)
	AddPushConfig(context.Context, *PushConfigAddRequest) (*PushConfigResponse, error)
	EditPushConfig(context.Context, *PushConfigEditRequest) (*PushConfigResponse, error)
	mustEmbedUnimplementedPushConfigServer()
}

// UnimplementedPushConfigServer must be embedded to have forward compatible implementations.
type UnimplementedPushConfigServer struct {
}

func (UnimplementedPushConfigServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedPushConfigServer) GetPushConfig(context.Context, *PushConfigRequest) (*PushConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPushConfig not implemented")
}
func (UnimplementedPushConfigServer) AddPushConfig(context.Context, *PushConfigAddRequest) (*PushConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPushConfig not implemented")
}
func (UnimplementedPushConfigServer) EditPushConfig(context.Context, *PushConfigEditRequest) (*PushConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditPushConfig not implemented")
}
func (UnimplementedPushConfigServer) mustEmbedUnimplementedPushConfigServer() {}

// UnsafePushConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PushConfigServer will
// result in compilation errors.
type UnsafePushConfigServer interface {
	mustEmbedUnimplementedPushConfigServer()
}

func RegisterPushConfigServer(s grpc.ServiceRegistrar, srv PushConfigServer) {
	s.RegisterService(&PushConfig_ServiceDesc, srv)
}

func _PushConfig_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushConfigServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushConfig_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushConfigServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushConfig_GetPushConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushConfigServer).GetPushConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushConfig_GetPushConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushConfigServer).GetPushConfig(ctx, req.(*PushConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushConfig_AddPushConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushConfigAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushConfigServer).AddPushConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushConfig_AddPushConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushConfigServer).AddPushConfig(ctx, req.(*PushConfigAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushConfig_EditPushConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushConfigEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushConfigServer).EditPushConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushConfig_EditPushConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushConfigServer).EditPushConfig(ctx, req.(*PushConfigEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PushConfig_ServiceDesc is the grpc.ServiceDesc for PushConfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PushConfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pushconfig.PushConfig",
	HandlerType: (*PushConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _PushConfig_Ping_Handler,
		},
		{
			MethodName: "GetPushConfig",
			Handler:    _PushConfig_GetPushConfig_Handler,
		},
		{
			MethodName: "AddPushConfig",
			Handler:    _PushConfig_AddPushConfig_Handler,
		},
		{
			MethodName: "EditPushConfig",
			Handler:    _PushConfig_EditPushConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pushconfig.proto",
}
